@using Entities;
@using Business;

<div class="form-group">

    <label>Bodega: </label>
    <select class="form-control" @onchange="OnChangedWarehouse"> 
        <option value=""> Seleccione una bodega... </option>

        @foreach (var warehouse in warehouses)
        {
            <option value="@warehouse.WarehouseId">@warehouse.WarehouseName </option>
        }

    </select>
</div>
<hr />
<EditForm Model="oInOut">
    <label>Product: </label>
    <InputSelect class="form-control" @bind-Value="oInOut.StorageId"> 
        <option value=""> Seleccione un producto </option>

        @foreach (var storage in storages)
        {
            <option value="@storage.StorageId">@storage.Product.ProductName</option>
        }

    </InputSelect>

    <div class="form-group">
        <label>Cantidad: </label>
        <InputNumber class="form-control" @bind-Value="oInOut.Quantity" /> 
    </div>
    
    <div class="form-group">
        <label>Es una entrada?</label>
        <InputCheckbox class="" @bind-Value="oInOut.IsInput" /> 
    </div>

    <input type="button" class="btn btn-success" value="@buttonValue" @onclick="CreateInOut"/>
       
</EditForm>

<div class="h4">
    @message
</div>

@code {
    InputOutputEntity oInOut = new InputOutputEntity();

    List<WarehouseEntity> warehouses = new List<WarehouseEntity>();
    List<StorageEntity> storages = new List<StorageEntity>();

    string buttonValue => oInOut.IsInput ? "Registrar Entrada" : "Registrar Salida"; 

    protected override async Task OnInitializedAsync()
    {
        warehouses = B_Warehouse.WarehouseList();
    }

    private void OnChangedWarehouse(ChangeEventArgs e)
    {
        var idWarehouse = e.Value.ToString();
        storages = B_Storage.StorageProductsByWarehouse(idWarehouse);
    }

    ProductEntity oProduct = new ProductEntity();
    StorageEntity oStorage= new StorageEntity();

    string message = "";
    private void CreateInOut()
    {
        oStorage = storages.LastOrDefault(s => s.StorageId == oInOut.StorageId);
        oProduct = oStorage.Product;

        if (oInOut.IsInput)
        {
            oStorage.ParcialQuantity = oStorage.ParcialQuantity + oInOut.Quantity;
            B_Storage.UpdateStorage(oStorage);

            oProduct.TotalQuantity = oProduct.TotalQuantity + oInOut.Quantity;
            B_Product.UpdateProduct(oProduct);

            message = $"El producto{oProduct.ProductName} ha sido actualizado";
        }
        else
        {
            if ( IsBiggerThanZero(oInOut.Quantity, oStorage.ParcialQuantity ) )
            {
                oStorage.ParcialQuantity = oStorage.ParcialQuantity - oInOut.Quantity;
                B_Storage.UpdateStorage(oStorage);

                oProduct.TotalQuantity = oProduct.TotalQuantity - oInOut.Quantity;
                B_Product.UpdateProduct(oProduct);

                message = $"El producto{oProduct.ProductName} ha sido actualizado";            
            }
            else
            {
                message = $"No existe la cantidad suficiente en bodega para el producto {oProduct.ProductName}";
            }
        }
    }

    private bool IsBiggerThanZero(int quantity, int storageQuantity)
    {
        if (storageQuantity > quantity)
        {
            return true;
        }
        return false;


    }
}
